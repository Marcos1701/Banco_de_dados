CREATE TABLE MESA (
  MESA_ID INT PRIMARY KEY,
  CAPACIDADE INT
);

CREATE TABLE ATENDENTE (
  ATENDENTE_ID SERIAL PRIMARY KEY,
  NOME VARCHAR(50)
);

CREATE TABLE PEDIDO (
  PEDIDO_ID SERIAL PRIMARY KEY,
  MESA_ID INT,
  ATENDENTE_ID INT,
  DATA_HORA TIMESTAMP DEFAULT NOW(),
  STATUS CHAR(1), --A - ABERTO, F - FECHADO--
  FOREIGN KEY (MESA_ID) REFERENCES MESA(MESA_ID),
  FOREIGN KEY (ATENDENTE_ID) REFERENCES ATENDENTE(ATENDENTE_ID)
);

CREATE TABLE ITEM_PEDIDO (
  ITEM_PEDIDO_ID SERIAL PRIMARY KEY,
  PEDIDO_ID INT,
  PRODUTO_ID INT,
  QUANTIDADE INT,
  FOREIGN KEY (PEDIDO_ID) REFERENCES PEDIDO(PEDIDO_ID),
  FOREIGN KEY (PRODUTO_ID) REFERENCES PRODUTO(PRODUTO_ID)
);

CREATE TABLE CATEGORIA (
  CATEGORIA_ID SERIAL PRIMARY KEY,
  NOME VARCHAR(50)
);

CREATE TABLE PRODUTO (
  PRODUTO_ID SERIAL PRIMARY KEY,
  NOME VARCHAR(50),
  DESCRICAO VARCHAR(200),
  CATEGORIA_ID INT,
  PRECO REAL,
  QUANTIDADE INT,
  STATUS CHAR(1), --V - VENDÁVEL, N - NÃO VENDÁVEL,
  FOREIGN KEY (CATEGORIA_ID) REFERENCES CATEGORIA(CATEGORIA_ID)
);

CREATE TABLE INGREDIENTE (
  INGREDIENTE_ID SERIAL PRIMARY KEY,
  NOME VARCHAR(50),
  PRODUTO_ID INT,
  FOREIGN KEY (PRODUTO_ID) REFERENCES PRODUTO(PRODUTO_ID)
);

CREATE TABLE ITEM_COMPRA (
  ITEM_COMPRA_ID SERIAL PRIMARY KEY,
  COMPRA_ID INT,
  PRODUTO_ID INT,
  QUANTIDADE INT,
  FOREIGN KEY (COMPRA_ID) REFERENCES COMPRA(COMPRA_ID),
  FOREIGN KEY (PRODUTO_ID) REFERENCES PRODUTO(PRODUTO_ID)
);

CREATE TABLE COMPRA (
  COMPRA_ID SERIAL PRIMARY KEY,
  FORNECEDOR_ID INT,
  VALOR_TOTAL REAL,
  DATA_HORA TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY (FORNECEDOR_ID) REFERENCES FORNECEDOR(FORNECEDOR_ID)
);

CREATE TABLE FORNECEDOR (
  FORNECEDOR_ID SERIAL PRIMARY KEY,
  NOME VARCHAR(100) not null,
  contato varchar(100) not null,
  cep char(8) not null,
  numero varchar(4) not null
);

CREATE TABLE COTACAO_ATUAL (
  COTACAO_ID SERIAL PRIMARY KEY,
  FORNECEDOR_ID INT,
  PRODUTO_ID INT,
  PRECO REAL,
  FOREIGN KEY (FORNECEDOR_ID) REFERENCES FORNECEDOR(FORNECEDOR_ID),
  FOREIGN KEY (PRODUTO_ID) REFERENCES PRODUTO(PRODUTO_ID)
);


CREATE FUNCTION ADICIONA_VALORES(INICIAL_TABLE CHAR(3),PARAMETRO_1 INT)
RETURNS VOID as $$
BEGIN

IF(INICIAL_TABLE ilike 'ATE') then
  insert into atendente values(DEFAULT,PARAMETRO_1);
  RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela ATENDENTE';
elsif (INICIAL_TABLE ilike 'CAT') then
  insert into categoria values(DEFAULT, PARAMETRO_1);
  RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela CATEGORIA';
else
 raise exception 'Ops, nenhuma tabela foi encontrada, revise os parametros passados..';
end if;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(INICIAL_TABLE CHAR(3),COD INT,PARAMETRO_1 varchar)
RETURNS VOID as $$
BEGIN

IF(INICIAL_TABLE ilike 'MES') then
  insert into atendente values(cod,PARAMETRO_1);
  RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela MESA';
else
 raise exception 'Ops, nenhuma tabela foi encontrada, revise os parametros passados..';
end if;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(INICIAL_TABLE CHAR(3),PARAMETRO_1 VARCHAR(100),
								 PARAMETRO_2 varchar(100), PARAMETRO_3 char(8), 
								 PARAMETRO_4 varchar(4))
RETURNS VOID as $$
BEGIN

IF(INICIAL_TABLE ilike 'FOR') then
  insert into FORNECEDOR values(DEFAULT,PARAMETRO_1,  PARAMETRO_2, PARAMETRO_3, PARAMETRO_4);
  RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela FORNECEDOR';
else
 raise exception 'Ops, nenhuma tabela foi encontrada, revise os parametros passados..';
end if;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(INICIAL_TABLE CHAR(3), PARAMETRO_1 VARCHAR(50),
                                 PARAMETRO_2 VARCHAR(200), PARAMETRO_3 INT,
                                 PARAMETRO_4 REAL, PARAMETRO_5 INT, PARAMETRO_6 CHAR(1))
RETURNS VOID AS $$
BEGIN
  IF(INICIAL_TABLE ILIKE 'PRO') THEN
    INSERT INTO produto VALUES (DEFAULT, PARAMETRO_1, PARAMETRO_2, PARAMETRO_3, PARAMETRO_4, PARAMETRO_5, PARAMETRO_6);
    RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela PRODUTO';
  ELSE
    RAISE EXCEPTION 'Ops, nenhuma tabela foi encontrada, revise os parâmetros passados..';
  END IF;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(INICIAL_TABLE CHAR(3), PARAMETRO_1 VARCHAR(50),
                                 PARAMETRO_2 INT)
RETURNS VOID AS $$
BEGIN
  IF(INICIAL_TABLE ILIKE 'ING') THEN
    INSERT INTO ingrediente VALUES (DEFAULT, PARAMETRO_1, PARAMETRO_2);
    RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela INGREDIENTE';
  ELSE
    RAISE EXCEPTION 'Ops, nenhuma tabela foi encontrada, revise os parâmetros passados..';
  END IF;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(INICIAL_TABLE CHAR(3), PARAMETRO_1 INT,
                                 PARAMETRO_2 INT, PARAMETRO_3 INT)
RETURNS VOID AS $$
BEGIN
  IF(INICIAL_TABLE ILIKE 'ITE') THEN
    INSERT INTO item_compra VALUES (DEFAULT, PARAMETRO_1, PARAMETRO_2, PARAMETRO_3);
    RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela ITEM_COMPRA';
  ELSE
    RAISE EXCEPTION 'Ops, nenhuma tabela foi encontrada, revise os parâmetros passados..';
  END IF;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(INICIAL_TABLE CHAR(3), PARAMETRO_1 INT,
                                 PARAMETRO_2 REAL)
RETURNS VOID AS $$
BEGIN
  IF(INICIAL_TABLE ILIKE 'COM') THEN
    INSERT INTO compra VALUES (DEFAULT, PARAMETRO_1, PARAMETRO_2, DEFAULT);
    RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela COMPRA';
  ELSE
    RAISE EXCEPTION 'Ops, nenhuma tabela foi encontrada, revise os parâmetros passados..';
  END IF;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(INICIAL_TABLE CHAR(3), PARAMETRO_1 INT,
                                 PARAMETRO_2 INT, PARAMETRO_3 INT, PARAMETRO_4 REAL)
RETURNS VOID AS $$
BEGIN
  IF(INICIAL_TABLE ILIKE 'COT') THEN
    INSERT INTO cotacao_atual VALUES (DEFAULT, PARAMETRO_1, PARAMETRO_2, PARAMETRO_3, PARAMETRO_4);
    RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela COTACAO_ATUAL';
  ELSE
    RAISE EXCEPTION 'Ops, nenhuma tabela foi encontrada, revise os parâmetros passados..';
  END IF;
END;
$$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION REALIZA_PEDIDO(MESA_ID INT, PRODUTO_ID INT, QUANTIDADE INT,ATENDENTE_ID INT, PEDIDO_ID INT DEFAULT NULL)
RETURNS VOID AS $$
DECLARE
  PEDIDO_ID INT;
BEGIN

    IF(PEDIDO_ID IS NULL) THEN
        INSERT INTO pedido VALUES (DEFAULT, MESA_ID, DEFAULT, DEFAULT);
        SELECT MAX(PEDIDO_ID) INTO PEDIDO_ID FROM pedido;
    END IF;

    IF NOT EXISTS (SELECT * FROM ITEM_PEDIDO WHERE PEDIDO_ID = PEDIDO_ID AND PRODUTO_ID = PRODUTO_ID) THEN
        INSERT INTO item_pedido VALUES (DEFAULT, PEDIDO_ID, PRODUTO_ID, QUANTIDADE);
    ELSE
        UPDATE item_pedido SET QUANTIDADE = QUANTIDADE + QUANTIDADE WHERE PEDIDO_ID = PEDIDO_ID AND PRODUTO_ID = PRODUTO_ID;
    END IF;
    
    RAISE NOTICE 'Pedido realizado com sucesso!';
    END;
$$
LANGUAGE PLPGSQL;


CREATE OR REPLACE TRIGGER TRG_CONFERE_PEDIDO
BEFORE INSERT ON ITEM_PEDIDO
FOR EACH ROW
EXECUTE PROCEDURE CONFERE_PEDIDO();

CREATE OR REPLACE FUNCTION CONFERE_PEDIDO()
RETURNS TRIGGER AS $$
DECLARE
  QUANTIDADE_ESTOQUE INT;
  QUANTIDADE_PEDIDO INT;
BEGIN

    SELECT QUANTIDADE INTO QUANTIDADE_ESTOQUE FROM PRODUTO WHERE PRODUTO_ID = NEW.PRODUTO_ID;
    SELECT QUANTIDADE INTO QUANTIDADE_PEDIDO FROM ITEM_PEDIDO WHERE PEDIDO_ID = NEW.PEDIDO_ID AND PRODUTO_ID = NEW.PRODUTO_ID;
    
    IF(QUANTIDADE_PEDIDO > QUANTIDADE_ESTOQUE) THEN
        RAISE EXCEPTION 'Quantidade de produto em estoque insuficiente!';
        RETURN NULL;
    END IF;
    
    RETURN NEW;
    END;
$$
LANGUAGE PLPGSQL;

-- VERSÃO ATUAL


-- CREATE OR REPLACE FUNCTION REALIZA_PEDIDO(MESA_ID INT, PRODUTO_ID INT, QUANT INT,ATENDENTE_ID INT, PED_ID INT DEFAULT NULL)
-- RETURNS VOID AS $$
-- DECLARE
--   PEDIDOID INT;
-- BEGIN

--     IF(PED_ID IS NULL) THEN
--         INSERT INTO pedido VALUES (DEFAULT, MESA_ID, DEFAULT, DEFAULT);
--         SELECT MAX(PEDIDO_ID) INTO PEDIDOID FROM pedido;
-- 	ELSE
-- 	 PEDIDOID := PED_ID;
--     END IF;

--     IF NOT EXISTS (SELECT * FROM ITEM_PEDIDO WHERE PEDIDO_ID = PEDIDOID AND PRODUTO_ID = PRODUTO_ID) THEN
--         INSERT INTO item_pedido VALUES (DEFAULT, PEDIDOID, PRODUTO_ID, QUANT);
--     ELSE
--         UPDATE item_pedido SET QUANTIDADE = QUANTIDADE + QUANT WHERE PEDIDO_ID = PEDIDOID AND PRODUTO_ID = PRODUTO_ID;
--     END IF;
    
--     RAISE NOTICE 'Pedido realizado com sucesso!';
--     END;
-- $$
-- LANGUAGE PLPGSQL;


-- CREATE TRIGGER TRG_CONFERE_ITEM_PEDIDO
-- BEFORE INSERT ON ITEM_PEDIDO
-- FOR EACH ROW
-- EXECUTE PROCEDURE CONFERE_ITEM_PEDIDO();

-- CREATE OR REPLACE FUNCTION CONFERE_ITEM_PEDIDO()
-- RETURNS TRIGGER AS $$
-- DECLARE
--   QUANTIDADE_ESTOQUE INT;
--   QUANTIDADE_PEDIDO INT;
  
-- BEGIN

--     SELECT QUANTIDADE INTO QUANTIDADE_ESTOQUE FROM PRODUTO WHERE PRODUTO_ID = NEW.PRODUTO_ID;
--     SELECT QUANTIDADE INTO QUANTIDADE_PEDIDO FROM ITEM_PEDIDO WHERE PEDIDO_ID = NEW.PEDIDO_ID AND PRODUTO_ID = NEW.PRODUTO_ID;
    
--     IF(QUANTIDADE_PEDIDO > QUANTIDADE_ESTOQUE) THEN
--         RAISE EXCEPTION 'Quantidade de produto em estoque insuficiente!';
--         RETURN NULL;
-- 	ELSIF EXISTS (SELECT * FROM INGREDIENTE WHERE PRODUTO_ID = NEW.PRODUTO_ID) THEN
-- 	    FOR PRODUTO IN
-- 		          SELECT * FROM INGREDIENTE WHERE PRODUTO_ID = NEW.PRODUTO_ID
-- 		LOOP
-- 		  IF EXISTS(SELECT * FROM )
--     END IF;
    
--     RETURN NEW;
--     END;
-- $$
-- LANGUAGE PLPGSQL;


-- Tabela FORNECEDOR
CREATE TABLE FORNECEDOR (
  FORNECEDOR_ID SERIAL PRIMARY KEY,
  NOME VARCHAR(100) NOT NULL,
  CONTATO VARCHAR(100) NOT NULL,
  CEP CHAR(8) NOT NULL,
  NUMERO VARCHAR(4) NOT NULL
);

-- Tabela CATEGORIA
CREATE TABLE CATEGORIA (
  CATEGORIA_ID SERIAL PRIMARY KEY,
  NOME VARCHAR(50)
);

-- Tabela PRODUTO
CREATE TABLE PRODUTO (
  PRODUTO_ID SERIAL PRIMARY KEY,
  NOME VARCHAR(50),
  DESCRICAO VARCHAR(200),
  CATEGORIA_ID INT,
  PRECO REAL,
  QUANTIDADE INT,
  STATUS CHAR(1),
  FOREIGN KEY (CATEGORIA_ID) REFERENCES CATEGORIA(CATEGORIA_ID)
);

-- Tabela INGREDIENTE
CREATE TABLE INGREDIENTE (
  INGREDIENTE_ID SERIAL PRIMARY KEY,
  NOME VARCHAR(50),
  PRODUTO_ID INT,
  QUANT_NESC INT,
  FOREIGN KEY (PRODUTO_ID) REFERENCES PRODUTO(PRODUTO_ID)
);

-- Tabela MESA
CREATE TABLE MESA (
  MESA_ID INT PRIMARY KEY,
  CAPACIDADE INT
);

-- Tabela ATENDENTE
CREATE TABLE ATENDENTE (
  ATENDENTE_ID SERIAL PRIMARY KEY,
  NOME VARCHAR(50)
);

-- Tabela COMPRA
CREATE TABLE COMPRA (
  COMPRA_ID SERIAL PRIMARY KEY,
  FORNECEDOR_ID INT,
  VALOR_TOTAL REAL,
  DATA_HORA TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY (FORNECEDOR_ID) REFERENCES FORNECEDOR(FORNECEDOR_ID)
);

-- Tabela COTACAO_ATUAL
CREATE TABLE COTACAO_ATUAL (
  COTACAO_ID SERIAL PRIMARY KEY,
  FORNECEDOR_ID INT,
  PRODUTO_ID INT,
  PRECO REAL,
  FOREIGN KEY (FORNECEDOR_ID) REFERENCES FORNECEDOR(FORNECEDOR_ID),
  FOREIGN KEY (PRODUTO_ID) REFERENCES PRODUTO(PRODUTO_ID)
);

-- Tabela PEDIDO
CREATE TABLE PEDIDO (
  PEDIDO_ID SERIAL PRIMARY KEY,
  MESA_ID INT,
  ATENDENTE_ID INT,
  DATA_HORA TIMESTAMP DEFAULT NOW(),
  STATUS CHAR(1),
  VALOR_TOTAL REAL,
  FOREIGN KEY (MESA_ID) REFERENCES MESA(MESA_ID),
  FOREIGN KEY (ATENDENTE_ID) REFERENCES ATENDENTE(ATENDENTE_ID)
);

-- Tabela ITEM_PEDIDO
CREATE TABLE ITEM_PEDIDO (
  ITEM_PEDIDO_ID SERIAL PRIMARY KEY,
  PEDIDO_ID INT,
  PRODUTO_ID INT,
  QUANTIDADE INT,
  VALOR_TOTAL REAL,
  FOREIGN KEY (PEDIDO_ID) REFERENCES PEDIDO(PEDIDO_ID),
  FOREIGN KEY (PRODUTO_ID) REFERENCES PRODUTO(PRODUTO_ID)
);

-- Tabela ITEM_COMPRA
CREATE TABLE ITEM_COMPRA (
  ITEM_COMPRA_ID SERIAL PRIMARY KEY,
  COMPRA_ID INT,
  PRODUTO_ID INT,
  QUANTIDADE INT,
  VALOR_TOTAL REAL,
  FOREIGN KEY (COMPRA_ID) REFERENCES COMPRA(COMPRA_ID),
  FOREIGN KEY (PRODUTO_ID) REFERENCES PRODUTO(PRODUTO_ID)
);

CREATE FUNCTION ADICIONA_VALORES(INICIAL_TABLE CHAR(3),PARAMETRO_1 INT)
RETURNS VOID as $$
BEGIN

IF(INICIAL_TABLE ilike 'ATENDENTE') then
  insert into atendente values(DEFAULT,PARAMETRO_1);
  RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela ATENDENTE';
elsif (INICIAL_TABLE ilike 'CATEGORIA') then
  insert into categoria values(DEFAULT, PARAMETRO_1);
  RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela CATEGORIA';
else
 raise exception 'Ops, nenhuma tabela foi encontrada, revise os parametros passados..';
end if;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(NAME_TABLE VARCHAR,COD INT,PARAMETRO_1 INT)
RETURNS VOID as $$
BEGIN

IF(NAME_TABLE ilike 'MESA') then
  insert into atendente values(COD,PARAMETRO_1);
  RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela MESA';
else
 raise exception 'Ops, nenhuma tabela foi encontrada, revise os parametros passados..';
end if;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(NAME_TABLE VARCHAR,PARAMETRO_1 VARCHAR(100),
								 PARAMETRO_2 varchar(100), PARAMETRO_3 char(8), 
								 PARAMETRO_4 varchar(4))
RETURNS VOID as $$
BEGIN

IF(NAME_TABLE ilike 'FORNECEDOR') then
  insert into FORNECEDOR values(DEFAULT,PARAMETRO_1,  PARAMETRO_2, PARAMETRO_3, PARAMETRO_4);
  RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela FORNECEDOR';
else
 raise exception 'Ops, nenhuma tabela foi encontrada, revise os parametros passados..';
end if;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(NAME_TABLE VARCHAR, PARAMETRO_1 VARCHAR(50),
                                 PARAMETRO_2 VARCHAR(200), PARAMETRO_3 INT,
                                 PARAMETRO_4 REAL, PARAMETRO_5 INT, PARAMETRO_6 CHAR(1))
RETURNS VOID AS $$
BEGIN
  IF(NAME_TABLE ILIKE 'PRODUTO') THEN
    INSERT INTO produto VALUES (DEFAULT, PARAMETRO_1, PARAMETRO_2, PARAMETRO_3, PARAMETRO_4, PARAMETRO_5, PARAMETRO_6);
    RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela PRODUTO';
  ELSE
    RAISE EXCEPTION 'Ops, nenhuma tabela foi encontrada, revise os parâmetros passados..';
  END IF;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(NAME_TABLE VARCHAR, PARAMETRO_1 VARCHAR(50),
                                 PARAMETRO_2 INT)
RETURNS VOID AS $$
BEGIN
  IF(NAME_TABLE ILIKE 'INGREDIENTE') THEN
    INSERT INTO ingrediente VALUES (DEFAULT, PARAMETRO_1, PARAMETRO_2);
    RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela INGREDIENTE';
  ELSE
    RAISE EXCEPTION 'Ops, nenhuma tabela foi encontrada, revise os parâmetros passados..';
  END IF;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(NAME_TABLE VARCHAR, PARAMETRO_1 INT,
                                 PARAMETRO_2 REAL)
RETURNS VOID AS $$
BEGIN
  IF(NAME_TABLE ILIKE 'COMPRA') THEN
    INSERT INTO compra VALUES (DEFAULT, PARAMETRO_1, PARAMETRO_2, DEFAULT);
    RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela COMPRA';
  ELSE
    RAISE EXCEPTION 'Ops, nenhuma tabela foi encontrada, revise os parâmetros passados..';
  END IF;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION ADICIONA_VALORES(NAME_TABLE VARCHAR, PARAMETRO_1 INT,
                                 PARAMETRO_2 INT, PARAMETRO_3 INT, PARAMETRO_4 REAL)
RETURNS VOID AS $$
BEGIN
  IF(NAME_TABLE ILIKE 'COTACAO') THEN
    INSERT INTO cotacao_atual VALUES (DEFAULT, PARAMETRO_1, PARAMETRO_2, PARAMETRO_3, PARAMETRO_4);
    RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela COTACAO_ATUAL';
  ELSIF(NAME_TABLE ILIKE 'ITEM_PEDIDO') THEN
    INSERT INTO ITEM_PEDIDO VALUES (DEFAULT, PARAMETRO_1, PARAMETRO_2, PARAMETRO_3, PARAMETRO_4);
    RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela ITEM_PEDIDO';
  ELSIF(NAME_TABLE ILIKE 'ITEM_COMPRA') THEN
    INSERT INTO item_compra VALUES (DEFAULT, PARAMETRO_1, PARAMETRO_2, PARAMETRO_3, PARAMETRO_4);
    RAISE NOTICE 'Os valores foram inseridos com sucesso na tabela ITEM_COMPRA';
  ELSE
    RAISE EXCEPTION 'Ops, nenhuma tabela foi encontrada, revise os parâmetros passados..';
  END IF;
END;
$$
LANGUAGE PLPGSQL;

-- Função para inserir um fornecedor
CREATE OR REPLACE FUNCTION inserir_fornecedor(
    p_nome VARCHAR(100),
    p_contato VARCHAR(100),
    p_cep CHAR(8),
    p_numero VARCHAR(4)
) RETURNS INT AS $$
DECLARE
    v_fornecedor_id INT;
BEGIN
    INSERT INTO FORNECEDOR (NOME, CONTATO, CEP, NUMERO)
    VALUES (p_nome, p_contato, p_cep, p_numero)
    RETURNING FORNECEDOR_ID INTO v_fornecedor_id;
    
    RETURN v_fornecedor_id;
END;
$$ LANGUAGE plpgsql;

-- Função para inserir um produto
CREATE OR REPLACE FUNCTION inserir_produto(
    p_nome VARCHAR(50),
    p_descricao VARCHAR(200),
    p_categoria_id INT,
    p_preco REAL,
    p_quantidade INT,
    p_status CHAR(1)
) RETURNS INT AS $$
DECLARE
    v_produto_id INT;
BEGIN
    INSERT INTO PRODUTO (NOME, DESCRICAO, CATEGORIA_ID, PRECO, QUANTIDADE, STATUS)
    VALUES (p_nome, p_descricao, p_categoria_id, p_preco, p_quantidade, p_status)
    RETURNING PRODUTO_ID INTO v_produto_id;
    
    RETURN v_produto_id;
END;
$$ LANGUAGE plpgsql;

-- Função para inserir um ingrediente
CREATE OR REPLACE FUNCTION inserir_ingrediente(
    p_nome VARCHAR(50),
    p_produto_id INT
) RETURNS INT AS $$
DECLARE
    v_ingrediente_id INT;
BEGIN
    INSERT INTO INGREDIENTE (NOME, PRODUTO_ID)
    VALUES (p_nome, p_produto_id)
    RETURNING INGREDIENTE_ID INTO v_ingrediente_id;
    
    RETURN v_ingrediente_id;
END;
$$ LANGUAGE plpgsql;

-- Função para inserir uma mesa
CREATE OR REPLACE FUNCTION inserir_mesa(
    p_mesa_id INT,
    p_capacidade INT
) RETURNS VOID AS $$
BEGIN
    INSERT INTO MESA (MESA_ID, CAPACIDADE)
    VALUES (p_mesa_id, p_capacidade);
END;
$$ LANGUAGE plpgsql;

-- Função para inserir um atendente
CREATE OR REPLACE FUNCTION inserir_atendente(
    p_nome VARCHAR(50)
) RETURNS INT AS $$
DECLARE
    v_atendente_id INT;
BEGIN
    INSERT INTO ATENDENTE (NOME)
    VALUES (p_nome)
    RETURNING ATENDENTE_ID INTO v_atendente_id;
    
    RETURN v_atendente_id;
END;
$$ LANGUAGE plpgsql;

-- Função para inserir uma compra
CREATE OR REPLACE FUNCTION inserir_compra(
    p_fornecedor_id INT,
    p_valor_total REAL
) RETURNS INT AS $$
DECLARE
    v_compra_id INT;
BEGIN
    INSERT INTO COMPRA (FORNECEDOR_ID, VALOR_TOTAL)
    VALUES (p_fornecedor_id, p_valor_total)
    RETURNING COMPRA_ID INTO v_compra_id;
    
    RETURN v_compra_id;
END;
$$ LANGUAGE plpgsql;

-- Função para inserir uma cotação atual
CREATE OR REPLACE FUNCTION inserir_cotacao_atual(
    p_fornecedor_id INT,
    p_produto_id INT,
    p_preco REAL
) RETURNS INT AS $$
DECLARE
    v_cotacao_id INT;
BEGIN
    INSERT INTO COTACAO_ATUAL (FORNECEDOR_ID, PRODUTO_ID, PRECO)
    VALUES (p_fornecedor_id, p_produto_id, p_preco)
    RETURNING COTACAO_ID INTO v_cotacao_id;
    
    RETURN v_cotacao_id;
END;
$$ LANGUAGE plpgsql;

-- Função para inserir um pedido
CREATE OR REPLACE FUNCTION inserir_pedido(
    p_mesa_id INT,
    p_atendente_id INT,
    p_status CHAR(1)
) RETURNS INT AS $$
DECLARE
    v_pedido_id INT;
BEGIN
    INSERT INTO PEDIDO (MESA_ID, ATENDENTE_ID, STATUS)
    VALUES (p_mesa_id, p_atendente_id, p_status)
    RETURNING PEDIDO_ID INTO v_pedido_id;
    
    RETURN v_pedido_id;
END;
$$ LANGUAGE plpgsql;

-- Função para inserir um item de pedido
CREATE OR REPLACE FUNCTION inserir_item_pedido(
    p_pedido_id INT,
    p_produto_id INT,
    p_quantidade INT
) RETURNS INT AS $$
DECLARE
    v_item_pedido_id INT;
BEGIN
    INSERT INTO ITEM_PEDIDO (PEDIDO_ID, PRODUTO_ID, QUANTIDADE)
    VALUES (p_pedido_id, p_produto_id, p_quantidade)
    RETURNING ITEM_PEDIDO_ID INTO v_item_pedido_id;
    
    RETURN v_item_pedido_id;
END;
$$ LANGUAGE plpgsql;

-- Função para inserir um item de compra
CREATE OR REPLACE FUNCTION inserir_item_compra(
    p_compra_id INT,
    p_produto_id INT,
    p_quantidade INT
) RETURNS INT AS $$
DECLARE
    v_item_compra_id INT;
BEGIN
    INSERT INTO ITEM_COMPRA (COMPRA_ID, PRODUTO_ID, QUANTIDADE)
    VALUES (p_compra_id, p_produto_id, p_quantidade)
    RETURNING ITEM_COMPRA_ID INTO v_item_compra_id;
    
    RETURN v_item_compra_id;
END;
$$ LANGUAGE plpgsql;

-- Função REALIZA_PEDIDO para criar um novo pedido e adicionar itens ao pedido
CREATE OR REPLACE FUNCTION REALIZA_PEDIDO(MESA_ID INT, PRODUTO_ID INT, QUANTIDADE INT, ATENDENTE_ID INT, PEDIDO_ID INT DEFAULT NULL)
RETURNS VOID AS $$
DECLARE
  NOVO_PEDIDO_ID INT;
BEGIN
  -- Verifica se o pedido já foi criado
  IF PEDIDO_ID IS NULL THEN
    -- Cria um novo pedido
    INSERT INTO PEDIDO (MESA_ID, ATENDENTE_ID, STATUS) VALUES (MESA_ID, ATENDENTE_ID, 'A') RETURNING PEDIDO_ID INTO NOVO_PEDIDO_ID;
  ELSE
    -- Utiliza o pedido existente
    NOVO_PEDIDO_ID := PEDIDO_ID;
  END IF;

  -- Adiciona o item ao pedido
  INSERT INTO ITEM_PEDIDO (PEDIDO_ID, PRODUTO_ID, QUANTIDADE) VALUES (NOVO_PEDIDO_ID, PRODUTO_ID, QUANTIDADE);
  RAISE NOTICE 'O item foi adicionado ao pedido com sucesso';

  -- Atualiza o valor total do pedido
  UPDATE PEDIDO SET VALOR_TOTAL = (SELECT SUM(PRECO * QUANTIDADE) FROM ITEM_PEDIDO JOIN PRODUTO USING (PRODUTO_ID) WHERE PEDIDO_ID = NOVO_PEDIDO_ID) WHERE PEDIDO_ID = NOVO_PEDIDO_ID;
  RAISE NOTICE 'O valor total do pedido foi atualizado';

  -- Atualiza o status do pedido para "F" (FECHADO) se não houver mais itens pendentes
  IF (SELECT COUNT(*) FROM ITEM_PEDIDO WHERE PEDIDO_ID = NOVO_PEDIDO_ID) = 0 THEN
    UPDATE PEDIDO SET STATUS = 'F' WHERE PEDIDO_ID = NOVO_PEDIDO_ID;
    RAISE NOTICE 'O pedido foi fechado';
  END IF;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION BUSCA_PEDIDOS_ATENDENTE(ATENDENTE_ID INT)
RETURNS TABLE (PEDIDO_ID INT, MESA_ID INT, STATUS CHAR, VALOR_TOTAL NUMERIC) AS $$
BEGIN
  RETURN QUERY SELECT PEDIDO_ID, MESA_ID, STATUS, VALOR_TOTAL FROM PEDIDO WHERE ATENDENTE_ID = ATENDENTE_ID;
END;
$$
LANGUAGE PLPGSQL;

CREATE FUNCTION BUSCA_PRODUTOS_CATEGORIA(CATEGORIA_ID INT)
RETURNS TABLE (PRODUTO_ID INT, NOME VARCHAR, PRECO NUMERIC) AS $$
BEGIN
  RETURN QUERY SELECT PRODUTO_ID, NOME, PRECO FROM PRODUTO WHERE CATEGORIA_ID = CATEGORIA_ID;
END;
$$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION ATUALIZA_ESTOQUE()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE INGREDIENTE SET QUANTIDADE = QUANTIDADE + NEW.QUANTIDADE WHERE INGREDIENTE_ID = NEW.INGREDIENTE_ID;
  RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;

CREATE TRIGGER TRG_ATUALIZA_ESTOQUE AFTER INSERT ON ITEM_COMPRA
FOR EACH ROW
EXECUTE FUNCTION ATUALIZA_ESTOQUE();

CREATE OR REPLACE FUNCTION VERIFICA_ESTOQUE()
RETURNS TRIGGER AS $$
DECLARE
  DISPONIVEL INT;
BEGIN
  SELECT QUANTIDADE INTO DISPONIVEL FROM INGREDIENTE WHERE INGREDIENTE_ID = NEW.INGREDIENTE_ID;
  IF DISPONIVEL < NEW.QUANTIDADE THEN
    RAISE EXCEPTION 'Quantidade insuficiente no estoque';
  END IF;
  RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;

CREATE TRIGGER TRG_VERIFICA_ESTOQUE BEFORE INSERT ON ITEM_PEDIDO
FOR EACH ROW
EXECUTE FUNCTION VERIFICA_ESTOQUE();

CREATE OR REPLACE FUNCTION REALIZA_COMPRA(IN FORNECEDOR_ID INT, IN ITENS_COMPRA TEXT[], IN DATA_COMPRA DATE)
RETURNS VOID AS $$
DECLARE
  COMPRA_ID INT;
BEGIN
  -- Insere a compra na tabela COMPRA
  INSERT INTO COMPRA (fornecedor_id, data_compra) VALUES (FORNECEDOR_ID, DATA_COMPRA) RETURNING compra_id INTO COMPRA_ID;

  -- Insere os itens da compra na tabela ITEM_COMPRA
  FOREACH ITEM TEXT IN ARRAY ITENS_COMPRA
  LOOP
    INSERT INTO ITEM_COMPRA (compra_id, produto_id, quantidade) VALUES (COMPRA_ID, ITEM[1]::INT, ITEM[2]::INT);
  END LOOP;

  RAISE NOTICE 'Compra realizada com sucesso.';

END;
$$
LANGUAGE PLPGSQL;

SELECT REALIZA_COMPRA(1, ARRAY[['1', '2'], ['3', '4']], '2023-06-04');
