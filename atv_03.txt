-- 1° Questão
CREATE TABLE ALUNO (
 MATRICULA VARCHAR(15) NOT NULL PRIMARY KEY,
 NOME VARCHAR(30)) 
 
 CREATE OR REPLACE FUNCTION INICIAL_NOME_A()
  RETURNS TRIGGER AS $CONFERE_NOME$
  BEGIN
   IF NEW.NOME ILIKE 'A%' THEN
   RAISE EXCEPTION 'Alunos com nomes iniciados com "a" não são permitidos';
   
   END IF;
     RETURN NEW;
  END;
  $CONFERE_NOME$
  LANGUAGE PLPGSQL;
  
  CREATE TRIGGER NAO_PERMITE_A 
  BEFORE INSERT OR UPDATE 
  ON ALUNO 
  FOR EACH ROW
  EXECUTE PROCEDURE
   INICIAL_NOME_A();
   
   
  INSERT INTO ALUNO VALUES('121', 'José'),('122','Alex')
  
  select * from aluno

-- 2° Questão
drop table funcionario
create table funcionario(
 cod int not null primary key,
 nome varchar(30) not null,
 sal int not null,
 dt_ult_at timestamp not null,
 usuario_que_at varchar(30) not null)
 
 create trigger t_inserir_valores
 before insert 
 on funcionario
 for each row
 execute procedure
  f_inserir_valores();
  
 create or replace function f_inserir_valores()
 returns trigger as $$
  begin
   if new.nome is null then
     raise exception 'O nome não pode ser nulo';
   end if;
   if new.sal <=0 or new.sal is null then
     raise exception '% não pode ter salario nulo ou negativo', new.nome;
   end if; 
     new.dt_ult_at = now();
	 new.usuario_que_at = current_user; 
    return new;
   end;
   $$
  language PLPGSQL;
  
insert into funcionario values(1,'Jose',100)

-- Questão 3

create table empregado(
 nome varchar not null,
 salario int not null);
 
create table empregado_audit(
 operacao char(1) not null,
 usuario varchar not null,
 data timestamp not null,
 nome varchar not null,
 salario int not null
 )


create trigger t_confere_op
 after insert or update or delete 
 on empregado
 for each row
 execute procedure
  f_confere_op();
  
 create or replace function f_confere_op()
 returns trigger as $$
  begin
    if (tg_op = 'DELETE') then
	  insert into empregado_audit select 'E', current_user, now(), old.*;
	elsif (tg_op = 'INSERT')
	  insert into empregado_audit select 'I', current_user, now(), new.*;
	elsif (tg_op = 'UPDATE')
	  nsert into empregado_audit select 'A', current_user, now(), new.*;
    return new;
   end;
   $$
  language PLPGSQL;
